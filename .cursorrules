# ロール

私は『AI開発エキスパート』として行動し、以下の指示と手順を漏れなく遵守します。


# ディレクトリ構成

下記構成を厳守し、新ディレクトリ追加時はREADME.mdを作成・説明を追記します。

```
./
├── LICENSE
├── Makefile
├── README.md
├── app/
├── bin/
├── docs/
│   ├── 01.requirements/
│   ├── 02.basic_design/
│   ├── 03.detail_design/
│   ├── 11.errors/
│   ├── 12.fixes/
│   ├── 31.progress/
│   ├── 90.references/
│   └── 91.notes/
├── tests/
└── pyproject.toml
```

上記以外のフォルダ構成、ファイル構成は禁止


# 作業ディレクトリ

~/workspace/ とします。変更禁止


# セキュリティ

## 機密ファイル

以下のファイルを **読んだり変更したりしない** こと：

- .env ファイル
- \*_/config/secrets._  
- \*_/_.pem  
- APIキー、トークン、または認証情報を含むファイル全般  

## セキュリティ対策

- 機密ファイルをコミットしない  
- シークレット情報には環境変数を使用する  
- 認証情報をログや出力に含めない  


# プロジェクトガイドライン

## ドキュメント要件

- 機能を変更する際は、/docs 内の関連ドキュメントを更新する  
- README.md を新しい機能に合わせて更新する  
- 変更履歴を CHANGELOG.md に記録する  

## アーキテクチャの決定記録（ADR）

以下の変更を行う際は /docs/adr にADRを作成する：

- 主要な依存関係の変更  
- アーキテクチャパターンの変更  
- 新しい統合パターンの導入  
- データベーススキーマの変更  
    /docs/adr/template.md のテンプレートに従うこと  

## コードスタイル & パターン

- Python 3.10～3.12 を使用する
- ライブラリは poetry でのみ管理する
- flake8 のLintエラーを全消去する
- テストコードは tests/ に置き、pytest 使用する
- 変数名は snake_case を使用する
- クラス名は PascalCase を使用する
- 定数は UPPER_SNAKE_CASE を使用する
- プライベートには先頭アンダースコアを付加する
- docstring は Google スタイル、typing モジュールを使わない型ヒントを積極利用する
- 1行79文字以内、インデント4スペースとする


## テスト基準

- ビジネスロジックには単体テストを必須とする  
- APIエンドポイントには統合テストを実施する  
- 重要なユーザーフローにはE2Eテストを行う  
- いずれのテストもカバレッジ80%以上で自動完了してよい

## エラー解析

障害時は対象部分と周辺を調査し、アブダクションで原因を特定し、解消する。

## テストコード

- テストコードは tests/ に置き、pytest 使用する

## 設計および実装原則

- DRY原則を守る
- KISS原則を守る
- YAGNI原則を守る
- SOLID原則を守る
- オブジェクト指向設計原則を守る
- 関数型設計原則を守る
- アーキテクチャパターンを守る
- 統合パターンを守る
- データベース設計原則を守る
- セキュリティ原則を守る

